{"ast":null,"code":"import mockData from \"../mock-data.json\"; //const TRANSACTIONS_PER_PAGE = 5\n\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page,\n    numTransactions\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  if (numTransactions === null) {\n    numTransactions = 5;\n  }\n\n  const start = 0 * numTransactions;\n  const end = start + numTransactions;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n  return transaction;\n};","map":{"version":3,"names":["mockData","data","employees","transactions","getEmployees","getTransactionsPaginated","page","numTransactions","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\n\n//const TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n  numTransactions\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n  if (numTransactions === null) {\n    numTransactions = 5\n  }\n\n  const start = 0 * numTransactions\n  const end = start + numTransactions\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  \n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n  return transaction\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB,C,CAGA;;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEF,QAAQ,CAACE,SAD+C;EAEnEC,YAAY,EAAEH,QAAQ,CAACG;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAGwB;EAAA,IAHvB;IACvCC,IADuC;IAEvCC;EAFuC,CAGuB;;EAC9D,IAAID,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;EACD;;EACD,IAAID,eAAe,KAAK,IAAxB,EAA8B;IAC5BA,eAAe,GAAG,CAAlB;EACD;;EAED,MAAME,KAAK,GAAG,IAAIF,eAAlB;EACA,MAAMG,GAAG,GAAGD,KAAK,GAAGF,eAApB;;EAEA,IAAIE,KAAK,GAAGR,IAAI,CAACE,YAAL,CAAkBQ,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeF,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMM,QAAQ,GAAGF,GAAG,GAAGT,IAAI,CAACE,YAAL,CAAkBQ,MAAxB,GAAiCL,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLM,QADK;IAELX,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBU,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CAxBM;AA0BP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAOP,IAAI,CAACE,YAAL,CAAkBa,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGhB,IAAI,CAACE,YAAL,CAAkBoB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAMA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;EACA,OAAOL,WAAP;AACD,CAbM"},"metadata":{},"sourceType":"module"}