{"ast":null,"code":"var _jsxFileName = \"/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { useCustomFetch } from \"./hooks/useCustomFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    clearCache\n  } = useCustomFetch();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [numPerPage, setNumPerPage] = useState(5);\n  const [showButton, setShowButton] = useState(true);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async numTransactions => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll(numTransactions, false);\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll(numTransactions, false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (paginatedTransactions !== null) {\n      if (paginatedTransactions.nextPage === null) {\n        setShowButton(false);\n      } else {\n        setShowButton(true);\n      }\n    }\n  }, [paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    transactionsByEmployeeUtils.invalidateData();\n    setShowButton(false);\n    setIsLoading(true);\n    await transactionsByEmployeeUtils.fetchById(employeeId, false);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions(numPerPage);\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === \"\") {\n            await loadAllTransactions(5);\n            setNumPerPage(5);\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          clearCache: clearCache\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), transactions !== null && showButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions(numPerPage + 5);\n            setNumPerPage(numPerPage + 5);\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"j6KtX9GZaHts89e55EwXldDxI7A=\", false, function () {\n  return [useCustomFetch, useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","useCustomFetch","App","clearCache","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","numPerPage","setNumPerPage","showButton","setShowButton","transactions","loadAllTransactions","numTransactions","invalidateData","fetchAll","nextPage","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport { useCustomFetch } from \"./hooks/useCustomFetch\"\n\nexport function App() {\n   \n  const {clearCache} = useCustomFetch()\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [numPerPage, setNumPerPage] = useState<number>(5)\n  const [showButton, setShowButton] = useState<boolean>(true)\n\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n\n  \n\n  const loadAllTransactions = useCallback(async (numTransactions: number | null) => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll(numTransactions, false)\n    \n    setIsLoading(false)\n    await paginatedTransactionsUtils.fetchAll(numTransactions, false)\n\n    \n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  useEffect(() => {\n    if (paginatedTransactions !== null) {\n      if (paginatedTransactions.nextPage === null) {\n        setShowButton(false)\n      } else {\n        setShowButton(true)\n      }\n    }\n  }, [paginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      transactionsByEmployeeUtils.invalidateData()\n      setShowButton(false)\n      setIsLoading(true)\n      await transactionsByEmployeeUtils.fetchById(employeeId, false)\n      setIsLoading(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions(numPerPage)\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if (newValue.id === \"\") {\n              await loadAllTransactions(5)\n              setNumPerPage(5)\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions \n          transactions={transactions} \n          clearCache={clearCache}/>\n\n          {transactions !== null && showButton && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions(numPerPage + 5)\n                setNumPerPage(numPerPage+5)\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}