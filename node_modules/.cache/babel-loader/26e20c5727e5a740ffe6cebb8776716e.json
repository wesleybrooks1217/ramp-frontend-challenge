{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }), [cache, wrappedRequest]);\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params);\n    const cacheKey1 = getCacheKey(\"paginatedTransactions\", params);\n    const cacheKey2 = getCacheKey(\"transactionsByEmployee\", params);\n    const cacheResponse1 = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey1);\n    const cacheResponse2 = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey2);\n\n    if (cacheResponse1) {\n      const data = JSON.parse(cacheResponse1);\n      console.log(\"HITS1\");\n    }\n\n    if (cacheResponse2) {\n      const data = JSON.parse(cacheResponse2);\n      console.log(\"HITS2\");\n    } //console.log(params)\n    //console.log(result)\n    //const cacheKey = getCacheKey(\"paginatedTransactions\", params)\n    //cache?.current.set(cacheKey, JSON.stringify(result))\n\n\n    return result;\n  }), [wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"j/MJvgyGdTYdw5q/fTHvRz37Zrc=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","data","JSON","parse","result","set","stringify","fetchWithoutCache","cacheKey1","cacheKey2","cacheResponse1","cacheResponse2","console","log","clearCache","undefined","Map","clearCacheByEndpoint","endpointsToClear","cacheKeys","Array","from","keys","key","clearKey","some","startsWith","delete"],"sources":["/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n        \n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        \n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        const cacheKey1 = getCacheKey(\"paginatedTransactions\", params)\n        const cacheKey2 = getCacheKey(\"transactionsByEmployee\", params)\n        const cacheResponse1 = cache?.current.get(cacheKey1)\n        const cacheResponse2 = cache?.current.get(cacheKey2)\n        \n        if (cacheResponse1) {\n          const data = JSON.parse(cacheResponse1)\n          console.log(\"HITS1\")\n        }\n        if (cacheResponse2) {\n          const data = JSON.parse(cacheResponse2)\n          console.log(\"HITS2\")\n        }\n        //console.log(params)\n        //console.log(result)\n        //const cacheKey = getCacheKey(\"paginatedTransactions\", params)\n        //cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      }),\n    [wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}