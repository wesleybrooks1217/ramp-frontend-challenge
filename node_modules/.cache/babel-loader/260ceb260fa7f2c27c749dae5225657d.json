{"ast":null,"code":"var _jsxFileName = \"/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [numPerPage, setNumPerPage] = useState(5);\n  const [showButton, setShowButton] = useState(true);\n  const [refetchPage, setRefetchPage] = useState(false);\n  const [refetchTransactionByEmployee, setRefetchTransactionByEmployee] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async numTransactions => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll(numTransactions, false);\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll(numTransactions, refetchPage);\n    setRefetchPage(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (paginatedTransactions !== null) {\n      if (paginatedTransactions.nextPage === null) {\n        setShowButton(false);\n      } else {\n        setShowButton(true);\n      }\n    }\n  }, [paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setShowButton(false);\n    await transactionsByEmployeeUtils.fetchById(employeeId, refetchTransactionByEmployee);\n    setRefetchTransactionByEmployee(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions(numPerPage);\n      setRefetchPage(false);\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === \"\") {\n            await loadAllTransactions(5);\n            setRefetchPage(false);\n            setNumPerPage(5);\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n          setRefetchTransactionByEmployee(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          setRefetchPage: setRefetchPage,\n          setRefetchTransactionByEmployee: setRefetchTransactionByEmployee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), transactions !== null && showButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions(numPerPage + 5);\n            setRefetchPage(false);\n            setNumPerPage(numPerPage + 5);\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uP3QBPI7ZcNfOOJ2yeVPyw5HSVk=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","numPerPage","setNumPerPage","showButton","setShowButton","refetchPage","setRefetchPage","refetchTransactionByEmployee","setRefetchTransactionByEmployee","transactions","loadAllTransactions","numTransactions","invalidateData","fetchAll","nextPage","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/wesleybrooks/Desktop/ramp-frontend-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [numPerPage, setNumPerPage] = useState<number>(5)\n  const [showButton, setShowButton] = useState<boolean>(true)\n  const [refetchPage, setRefetchPage] = useState<boolean>(false)\n  const [refetchTransactionByEmployee, setRefetchTransactionByEmployee] = useState<boolean>(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  \n\n  const loadAllTransactions = useCallback(async (numTransactions: number | null) => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll(numTransactions, false)\n    \n    setIsLoading(false)\n    await paginatedTransactionsUtils.fetchAll(numTransactions, refetchPage)\n    setRefetchPage(false)\n\n    \n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  useEffect(() => {\n    if (paginatedTransactions !== null) {\n      if (paginatedTransactions.nextPage === null) {\n        setShowButton(false)\n      } else {\n        setShowButton(true)\n      }\n    }\n  }, [paginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setShowButton(false)\n      await transactionsByEmployeeUtils.fetchById(employeeId, refetchTransactionByEmployee)\n      setRefetchTransactionByEmployee(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions(numPerPage)\n      setRefetchPage(false)\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if (newValue.id === \"\") {\n              await loadAllTransactions(5)\n              setRefetchPage(false)\n              setNumPerPage(5)\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n            setRefetchTransactionByEmployee(false)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions \n          transactions={transactions} \n          setRefetchPage={setRefetchPage}\n          setRefetchTransactionByEmployee={setRefetchTransactionByEmployee}/>\n\n          {transactions !== null && showButton && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions(numPerPage + 5)\n                setRefetchPage(false)\n                setNumPerPage(numPerPage+5)\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}